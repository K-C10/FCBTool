import static java.lang.System.*;
import java.util.*;
import java.io.*;

public class SpecialBuilder {
  private static final String[] DATAPOINTS = "Country,Location,Geographic coordinates,Area</a,border countries (,Climate,terrain,lowest point,highest point,Natural resources,Nationality,languages,Religions,Population</a,Population growth rate,Birth rate,Death rate,Net migration rate,Life expectancy at birth,Country Abbreviation,Government type,Capital,Legal system,National symbol(s),Industries,Exports - commodities,Imports - commodities"
      .split(",");
  private static final String[] DebugData = { "Filler error", "RepairedLocation \u2587 filler", "RepairedCoords",
      "RepairedArea", "RepairedBorderCountries", "RepairedClimate \u2587 filler", "Repairedterrain \u2587 filler",
      "RepairedlowestPoint", "RepairedhighestPoint", "RepairedNaturalResources", "RepairedNationality",
      "RepairedLanguages filler", "RepairedReligions filler", "RepairedPopulation", "RepairedPopulationGrowthRate",
      "RepairedBirthrate", "RepairedDeathrate", "RepairedNetmigrationrate", "RepairedLifeexpectancyatbirth",
      "RepairedCountryAbbrevitation", "RepairedNationalSymbols;filler", "RepairedGovernmentType extrainfo filler",
      "RepairedCapital<filler", "Industry1\u2587Industry2\u2587Industry3", "Exports1\u2587Exports2\u2587Exports3",
      "Imports1\u2587Imports2\u2587Imports3", "filler length error" };
  static String[] file = new String[0];
  private static ArrayList<String> Errors = new ArrayList<String>();

  public static void compileErrors() throws IOException {
    Errors.add("Data structure Guide \\/\nDataPoint -> corrupted Data / country > repaired data by user\n\n");
    out.println("Special Case Builder");
    int count = 0;
    Scanner Sfile = new Scanner(new File("00Refined Data.dat"));

    while (Sfile.hasNextLine()) {
      file = Cutils.addArrayindex(file);
      file[count] = Sfile.nextLine();
      count++;
    }

    // out.println(Arrays.toString(file));
    Cutils.checkFileIntegrity();
    Cutils.loadConfig();
    for (String i : file)
      checkForErrors(i);
    FileWriter out = new FileWriter(new File("Errors.txt"));

    for (int i = 0; i < Errors.size(); i++) {
      out.write(Errors.get(i));
    }

    out.close();
    Sfile.close();
  }

  private static void checkForErrors(String data) {
    String country = data.split("[/>]")[1], ErrorOn = null;
    data = data.split(">")[1];
    int count = 0;
    // data is split on the ~
    // out.println(Arrays.toString(Cutils.DataOffsets));
    for (String i : data.split("~")) {
      // out.println(DATAPOINTS[count] + " > " + i);

      switch (DATAPOINTS[count]) { // Climate,terrain,lowest point,highest point,Natural
                                   // resources,Nationality,languages,Religions,Population</a,Population growth
                                   // rate,Birth rate,Death rate,Net migration rate,Life expectancy at
                                   // birth,Country Abbreviation,Government type,Capital,Legal system,National
                                   // symbol(s),Industries,Exports - commodities,Imports - commodities

        case "Geographic coordinates":
          // out.println("Geographic coordinates");
          if (i.split("\u2587").length != 2)
            ErrorOn = Cutils.DataOffsets[1] + "`Geographic coordinates";
          break;

        case "border countries (":
          if (i.split(" ")[1].equals("DATA"))
            ErrorOn = Cutils.DataOffsets[4] + "`border countries (";
          break;

        case "Climate":
          if (i.split(" ").length < 5)
            ErrorOn = Cutils.DataOffsets[5] + "`Climate";
          break;

        case "terrain":
          if (i.split(" ").length < 5)
            ErrorOn = Cutils.DataOffsets[6] + "`terrain";
          break;

        case "lowest point":
          // out.println(i.split(" ")[i.split(" ").length - 1]);
          try {
            if (!(i.split(" ")[i.split(" ").length - 1].equals("m")))
              ErrorOn = Cutils.DataOffsets[7] + "`lowest point";
          } catch (ArrayIndexOutOfBoundsException err) {
            ErrorOn = Cutils.DataOffsets[7] + "`lowest point";
          }
          break;

        case "highest point":
          try {
            if (!(i.split(" ")[i.split(" ").length - 1].equals("m")))
              ErrorOn = Cutils.DataOffsets[8] + "`highest point";
          } catch (ArrayIndexOutOfBoundsException err) {
            ErrorOn = Cutils.DataOffsets[8] + "`highest point";
          }
          break;

        case "Natural resources":
          if (i.split("\u2587").length < 3)
            ErrorOn = Cutils.DataOffsets[9] + "`Natural resources";
          break;

        case "Nationality":
          if (i.split(" ")[0].equals("DATA"))
            ErrorOn = Cutils.DataOffsets[10] + "`Nationality";
          break;

        case "languages":
          if (i.split(" ")[0].equals("DATA"))
            ErrorOn = Cutils.DataOffsets[11] + "`languages";
          break;

        case "Religions":
          if (i.split(" ")[0].equals("DATA"))
            ErrorOn = Cutils.DataOffsets[12] + "`Religions";
          break;

        case "Population</a":
          if (!(i.charAt(i.length() - 1) == ')'))
            ErrorOn = Cutils.DataOffsets[13] + "`Population</a";
          break;

        case "Population growth rate":
          if (i.split(" ")[0].equals("DATA"))
            ErrorOn = Cutils.DataOffsets[14] + "`Population growth rate";
          break;

        case "Birth rate":
          if (i.charAt(0) == 'N')
            ErrorOn = Cutils.DataOffsets[15] + "`Birth rate";
          break;

        case "Death rate":
          if (i.charAt(0) == 'N')
            ErrorOn = Cutils.DataOffsets[16] + "`Death rate";
          break;

        case "Net migration rate":
          if (i.split(" ")[0].equals("DATA"))
            ErrorOn = Cutils.DataOffsets[17] + "`Net migration rate";
          break;

        case "Life expectancy at birth":
          if (i.split(" ")[0].equals("DATA"))
            ErrorOn = Cutils.DataOffsets[18] + "`Life expectancy at birth";
          break;

        case "Government type":
          if (i.substring(0, i.length() - 1).equals("DATA"))
            ErrorOn = Cutils.DataOffsets[20] + "`Government type";
          break;

        case "Capital":
          if (i.split(" ")[0].equals("DATA"))
            ErrorOn = Cutils.DataOffsets[21] + "`Capital";
          break;

        case "Legal system":
          if (i.split(" ").length < 2)
            ErrorOn = Cutils.DataOffsets[22] + "`Legal system";
          break;

        case "National symbol(s)":
          try {
            if (i.split(" ")[0].equals("DATA"))
              ErrorOn = Cutils.DataOffsets[23] + "`National symbol(s)";
          } catch (ArrayIndexOutOfBoundsException err) {
            ErrorOn = Cutils.DataOffsets[23] + "`National symbol(s)";
          }
          break;

        case "Industries":
          if (i.split(",").length < 3) {
            ErrorOn = Cutils.DataOffsets[24] + "`Industries";
          }
          break;

        case "Exports - commodities":
          if (i.split(",").length < 3) {
            ErrorOn = Cutils.DataOffsets[25] + "`Exports - commodities";
          }
          break;

        case "Imports - commodities":
          // out.println(i.split(",").length);
          if (i.split(",").length < 3) {
            ErrorOn = Cutils.DataOffsets[26] + "`Imports - commodities";
          }
          break;

        default:
          // if(!(Terminal.ErrorLog.contains("Warning: The Term \"" +
          // Cutils.DataPoints[x] + "\" was not found in switch statement")))
          // Terminal.ErrorLog.add("Warning: The Term \"" + Cutils.DataPoints[x] + "\"
          // was not found in switch statement");
          break;
      }
      if (!(ErrorOn == null))
        Errors.add(ErrorOn + "&\"" + i + "\"&" + country + "&" + DebugData[count] + "\n");

      count++;
      ErrorOn = null;
    }

  }

  public static void extractor() throws IOException {
    // given data
    // offset`datatype->"messedUpData"/country>NEWDATA
    // data offsets // Cutils.DataOffsets[index];
    // output // conutryName.html/datatype > filler > filler > filler > New Data

    String[] tempfile = new String[0], output;
    String countryName, dataType, newData, filler;
    int count = 0;

    Scanner file = new Scanner(new File("Errors.txt"));
    file.nextLine();
    file.nextLine();
    file.nextLine();
    file.nextLine(); // this removes the instructions on the error data file because i to lazy to
                     // make it smart

    while (file.hasNextLine()) { // reading in the file to an array
      tempfile = Cutils.addArrayindex(tempfile);
      tempfile[count] = file.nextLine();
      count++;
      // file.nextLine(); // this is to remove the space which would mess up the
      // entire function
    }
    file.close();

    output = new String[tempfile.length];

    for (int i = 0; i < tempfile.length - 1; i++) {

      // offset`datatype/old data/country/new Data

      countryName = tempfile[i].split("&")[2];
      // out.println(Arrays.toString(tempfile[i].split("-")) +
      // "---------------------------------");
      dataType = tempfile[i].split("[`&]")[1];
      newData = tempfile[i].split("&")[3];

      filler = "";
      for (int t = 0; t < Integer.parseInt(tempfile[i].split("`")[0]) - 3; t++) {
        filler += newData + t + "</>";
      }
      filler += newData + "</>";
      for (int t = 0; t < 10; t++)
        filler += newData + t + "</>";
      // out.println(Arrays.toString(tempfile[i].split(">")));
      output[i] = countryName + ".html!" + dataType + ">" + filler;
    }

    FileWriter out = new FileWriter(new File("Inject.txt"));

    for (int i = 0; i < output.length - 1; i++)
      out.write(output[i] + "\n");

    out.close();

  }
}